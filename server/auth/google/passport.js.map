{"version":3,"sources":["auth/google/passport.js"],"names":["setup","User","config","use","clientID","google","clientSecret","callbackURL","accessToken","refreshToken","profile","done","email","emails","value","fields","split","username","domain","findOne","exec","then","message","user","name","displayName","provider","_json","save","catch","err"],"mappings":";;;;;QAIgBA,K,GAAAA,K;;AAJhB;;;;AACA;;AACA;;;;;;AAEO,SAASA,KAAT,CAAeC,IAAf,EAAqBC,MAArB,EAA6B;AAClC,qBAASC,GAAT,CAAa,kCAAmB;AAC9BC,cAAUF,OAAOG,MAAP,CAAcD,QADM;AAE9BE,kBAAcJ,OAAOG,MAAP,CAAcC,YAFE;AAG9BC,iBAAaL,OAAOG,MAAP,CAAcE;AAHG,GAAnB,EAKb,UAASC,WAAT,EAAsBC,YAAtB,EAAoCC,OAApC,EAA6CC,IAA7C,EAAmD;AACjD,QAAMC,QAAQF,QAAQG,MAAR,CAAe,CAAf,EAAkBC,KAAhC;AACA,QAAMC,SAASH,MAAMI,KAAN,CAAY,GAAZ,CAAf;AACA,QAAMC,WAAWF,OAAO,CAAP,CAAjB;AACA,QAAMG,SAASH,OAAO,CAAP,CAAf;AACAd,SAAKkB,OAAL,CAAa,EAAC,YAAYF,QAAb,EAAb,EAAsCG,IAAtC,GACGC,IADH,CACQ,gBAAQ;;AAEZ,UAAGnB,OAAOgB,MAAP,KAAkBA,MAArB,EAA4B;AAC1B,eAAOP,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEW,SAAU,+BAAZ,EAAlB,CAAP;AACD;;AAED,UAAIC,IAAJ,EAAU;AACR,eAAOZ,KAAK,IAAL,EAAWY,IAAX,CAAP;AACD;;AAEDA,aAAO,IAAItB,IAAJ,CAAS;AACduB,cAAMd,QAAQe,WADA;AAEdb,eAAOA,KAFO;AAGdK,kBAAUA,QAHI;AAIdS,kBAAU,QAJI;AAKdrB,gBAAQK,QAAQiB;AALF,OAAT,CAAP;AAOAJ,WAAKK,IAAL,GACGP,IADH,CACQ;AAAA,eAAQV,KAAK,IAAL,EAAWY,IAAX,CAAR;AAAA,OADR,EAEGM,KAFH,CAES;AAAA,eAAOlB,KAAKmB,GAAL,CAAP;AAAA,OAFT;AAGD,KArBH,EAsBGD,KAtBH,CAsBS;AAAA,aAAOlB,KAAKmB,GAAL,CAAP;AAAA,KAtBT;AAuBD,GAjCY,CAAb;AAkCD","file":"auth/google/passport.js","sourcesContent":["import passport from 'passport';\nimport {Strategy as GoogleStrategy} from 'passport-google-oauth20';\nimport error from '../../components/errors';\n\nexport function setup(User, config) {\n  passport.use(new GoogleStrategy({\n    clientID: config.google.clientID,\n    clientSecret: config.google.clientSecret,\n    callbackURL: config.google.callbackURL\n  },\n  function(accessToken, refreshToken, profile, done) {\n    const email = profile.emails[0].value;\n    const fields = email.split('@');\n    const username = fields[0];\n    const domain = fields[1];\n    User.findOne({'username': username }).exec()\n      .then(user => {\n\n        if(config.domain !== domain){\n          return done(null, false, { message : \"error-message-invalid-account\" });\n        }\n\n        if (user) {\n          return done(null, user);\n        }\n\n        user = new User({\n          name: profile.displayName,\n          email: email,\n          username: username,\n          provider: 'google',\n          google: profile._json\n        });\n        user.save()\n          .then(user => done(null, user))\n          .catch(err => done(err));\n      })\n      .catch(err => done(err));\n  }));\n}\n"],"sourceRoot":"/source/"}