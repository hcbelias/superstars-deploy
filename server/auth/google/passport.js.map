{"version":3,"sources":["auth/google/passport.js"],"names":["setup","getDataFromDB","User","username","domain","email","profile","token","done","findOne","exec","then","tokenObject","undefined","user","name","displayName","provider","google","_json","save","catch","err","config","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","emails","value","fields","split","console","log","endpoint","ssoUrl","error","response","body","statusCode","statusMessage","bodyToken","message","contentType","headers","JSON","parse"],"mappings":"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","file":"auth/google/passport.js","sourcesContent":["import passport from 'passport';\r\nimport {Strategy as GoogleStrategy} from 'passport-google-oauth20';\r\nimport error from '../../components/errors';\r\nimport config from '../../config/environment'\r\nimport request from 'request';\r\n\r\nfunction getDataFromDB(User, username, domain, email, profile, token, done){\r\n   User.findOne({'username': username }).exec()\r\n    .then(user => {\r\n      const tokenObject = token ? { 'ssoToken':  token} : undefined;\r\n      if (user) {\r\n        return done(null, user, tokenObject);\r\n      }\r\n\r\n      user = new User({\r\n        name: profile.displayName,\r\n        email: email,\r\n        username: username,\r\n        provider: 'google',\r\n        google: profile._json\r\n      });\r\n\r\n      user.save()\r\n        .then(user => done(null, user, tokenObject))\r\n        .catch(err => done(err));\r\n    })\r\n    .catch(err => done(err));\r\n\r\n}\r\n\r\nexport function setup(User, config) {\r\n  passport.use(new GoogleStrategy({\r\n    clientID: config.google.clientID,\r\n    clientSecret: config.google.clientSecret,\r\n    callbackURL: config.google.callbackURL\r\n  },\r\n  function(accessToken, refreshToken, profile, done) {\r\n    const email = profile.emails[0].value;\r\n    const fields = email.split('@');\r\n    const username = fields[0];\r\n    const domain = fields[1];\r\n    console.log('Google accessToken: ' + accessToken);\r\n    let endpoint = `${config.ssoUrl}?access_token=${accessToken}`;\r\n\r\n    request(endpoint, function(error, response, body){\r\n      console.log('SSO error: ' + error);\r\n      console.log('SSO response: ' + response.statusCode + ' - ' + response.statusMessage);\n\r\n      let bodyToken;\r\n      if(error){\r\n        return done(error);\r\n      }\r\n\r\n      if(config.domain !== domain){\r\n        return done(null, false, { message : \"error-message-invalid-account\" });\r\n      }\r\n      const contentType = response.headers['content-type'];\r\n      console.log('SSO content type: ' + contentType);\r\n      switch (response.statusCode) {\r\n        case 200:\r\n          if(contentType === \"text/html; charset=utf-8\"){\r\n            console.log('SSO 200 Status Code returning HTML: ' + response.body);\r\n          }else if(contentType === \"application/json; charset=utf-8\"){\r\n            bodyToken = JSON.parse(body);\r\n            console.log('SSO accessToken: ' + bodyToken.token);\r\n          }else{\r\n            console.log('SSO 200 Status Code returning content not identified: ' + response.body);\r\n          }\r\n          break;\r\n        case 401:\r\n          console.log('SSO Unauthorized.');\r\n          break;\r\n        case 500:\r\n          console.log('SSO Error: ' + body);\r\n          break;\r\n        default:\r\n          console.log('SSO Unrecognized Status Code: ' + body);\r\n      }\r\n\r\n\r\n      return getDataFromDB(User, username, domain, email, profile, bodyToken, done);\r\n    });\r\n\r\n  }));\r\n}\r\n"],"sourceRoot":"/source/"}