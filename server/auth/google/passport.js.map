<<<<<<< HEAD
{"version":3,"sources":["auth/google/passport.js"],"names":["setup","getDataFromDB","User","username","domain","email","profile","token","done","findOne","exec","then","tokenObject","undefined","user","name","displayName","google","_json","provider","save","catch","err","config","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","emails","value","fields","split","message"],"mappings":";;;;;QA6BgBA,K,GAAAA,K;;AA7BhB;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+CC,KAA/C,EAAsDC,OAAtD,EAA+DC,KAA/D,EAAsEC,IAAtE,EAA2E;AACzEN,OAAKO,OAAL,CAAa,EAAC,YAAYN,QAAb,EAAb,EAAsCO,IAAtC,GACEC,IADF,CACO,gBAAQ;AACZ,QAAMC,cAAcL,QAAQ,EAAE,YAAaA,KAAf,EAAR,GAAgCM,SAApD;AACA,QAAIC,IAAJ,EAAU;AACTA,WAAKC,IAAL,GAAYT,QAAQU,WAApB;AACAF,WAAKG,MAAL,GAAcX,QAAQY,KAAtB;AACA,KAHD,MAGO;AACNJ,aAAO,IAAIZ,IAAJ,CAAS;AACfa,cAAMT,QAAQU,WADC;AAEfX,eAAOA,KAFQ;AAGfF,kBAAUA,QAHK;AAIfgB,kBAAU,QAJK;AAKfF,gBAAQX,QAAQY;AALD,OAAT,CAAP;AAOA;AACDJ,SAAKM,IAAL,GACGT,IADH,CACQ;AAAA,aAAQH,KAAK,IAAL,EAAWM,IAAX,EAAiBF,WAAjB,CAAR;AAAA,KADR,EAEGS,KAFH,CAES;AAAA,aAAOb,KAAKc,GAAL,CAAP;AAAA,KAFT;AAGD,GAlBF,EAmBED,KAnBF,CAmBQ;AAAA,WAAOb,KAAKc,GAAL,CAAP;AAAA,GAnBR;AAoBD;;AAEM,SAAStB,KAAT,CAAeE,IAAf,EAAqBqB,MAArB,EAA6B;AAClC,qBAASC,GAAT,CAAa,kCAAmB;AAC9BC,cAAUF,OAAON,MAAP,CAAcQ,QADM;AAE9BC,kBAAcH,OAAON,MAAP,CAAcS,YAFE;AAG9BC,iBAAaJ,OAAON,MAAP,CAAcU;AAHG,GAAnB,EAKb,UAASC,WAAT,EAAsBC,YAAtB,EAAoCvB,OAApC,EAA6CE,IAA7C,EAAmD;AACjD,QAAMH,QAAQC,QAAQwB,MAAR,CAAe,CAAf,EAAkBC,KAAhC;AACA,QAAMC,SAAS3B,MAAM4B,KAAN,CAAY,GAAZ,CAAf;AACA,QAAM9B,WAAW6B,OAAO,CAAP,CAAjB;AACA,QAAM5B,SAAS4B,OAAO,CAAP,CAAf;;AAEA,QAAGT,OAAOnB,MAAP,KAAkBA,MAArB,EAA4B;AACxB,aAAOI,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAE0B,SAAU,+BAAZ,EAAlB,CAAP;AACH;AACC;AACF,WAAOjC,cAAcC,IAAd,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,KAAtC,EAA6CC,OAA7C,EAAsD,EAAE,SAAS,EAAX,EAAtD,EAAsEE,IAAtE,CAAP;AACD,GAhBY,CAAb;AAiBD","file":"auth/google/passport.js","sourcesContent":["import passport from 'passport';\r\nimport {Strategy as GoogleStrategy} from 'passport-google-oauth20';\r\nimport error from '../../components/errors';\r\nimport config from '../../config/environment'\r\nimport request from 'request';\r\n\r\nfunction getDataFromDB(User, username, domain, email, profile, token, done){\r\n  User.findOne({'username': username }).exec()\r\n   .then(user => {\r\n     const tokenObject = token ? { 'ssoToken':  token} : undefined;\r\n     if (user) {\r\n    \t user.name = profile.displayName;\r\n    \t user.google = profile._json;\r\n     } else {\r\n    \t user = new User({\r\n    \t\t name: profile.displayName,\r\n    \t\t email: email,\r\n    \t\t username: username,\r\n    \t\t provider: 'google',\r\n    \t\t google: profile._json\r\n    \t });\r\n     }\r\n     user.save()\r\n       .then(user => done(null, user, tokenObject))\r\n       .catch(err => done(err));\r\n   })\r\n   .catch(err => done(err));\r\n}\r\n\r\nexport function setup(User, config) {\r\n  passport.use(new GoogleStrategy({\r\n    clientID: config.google.clientID,\r\n    clientSecret: config.google.clientSecret,\r\n    callbackURL: config.google.callbackURL\r\n  },\r\n  function(accessToken, refreshToken, profile, done) {\r\n    const email = profile.emails[0].value;\r\n    const fields = email.split('@');\r\n    const username = fields[0];\r\n    const domain = fields[1];\r\n\r\n    if(config.domain !== domain){\r\n        return done(null, false, { message : \"error-message-invalid-account\" });\r\n    }\r\n      //TODO: removing SSO for now\r\n    return getDataFromDB(User, username, domain, email, profile, { 'token': ''}, done);\r\n  }));\r\n}\r\n"],"sourceRoot":"/source/"}
=======
{"version":3,"sources":["auth/google/passport.js"],"names":["setup","getDataFromDB","User","username","domain","email","profile","token","done","findOne","exec","then","tokenObject","undefined","user","name","displayName","google","_json","provider","save","catch","err","config","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","emails","value","fields","split","console","log","endpoint","ssoUrl","error","response","body","statusCode","statusMessage","bodyToken","message","contentType","headers","JSON","parse"],"mappings":"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","file":"auth/google/passport.js","sourcesContent":["import passport from 'passport';\nimport {Strategy as GoogleStrategy} from 'passport-google-oauth20';\nimport error from '../../components/errors';\nimport config from '../../config/environment'\nimport request from 'request';\n\nfunction getDataFromDB(User, username, domain, email, profile, token, done){\n  User.findOne({'username': username }).exec()\n   .then(user => {\n     const tokenObject = token ? { 'ssoToken':  token} : undefined;\n     if (user) {\n    \t user.name = profile.displayName;\n    \t user.google = profile._json;\n     } else {\n    \t user = new User({\n    \t\t name: profile.displayName,\n    \t\t email: email,\n    \t\t username: username,\n    \t\t provider: 'google',\n    \t\t google: profile._json\n    \t });\n     }\n     user.save()\n       .then(user => done(null, user, tokenObject))\n       .catch(err => done(err));\n   })\n   .catch(err => done(err));\n}\n\nexport function setup(User, config) {\n  passport.use(new GoogleStrategy({\n    clientID: config.google.clientID,\n    clientSecret: config.google.clientSecret,\n    callbackURL: config.google.callbackURL\n  },\n  function(accessToken, refreshToken, profile, done) {\n    const email = profile.emails[0].value;\n    const fields = email.split('@');\n    const username = fields[0];\n    const domain = fields[1];\n    console.log('Google accessToken: ' + accessToken);\n    let endpoint = `${config.ssoUrl}?access_token=${accessToken}`;\n\n    request(endpoint, function(error, response, body){\n      console.log('SSO endpoint: ' + endpoint);\n      console.log('SSO response: ' + response.statusCode + ' - ' + response.statusMessage);\n\n      let bodyToken;\n      \n\n      if(config.domain !== domain){\n        return done(null, false, { message : \"error-message-invalid-account\" });\n      }\n      \n      if(error){\n        console.log('SSO Error: ' + error);\n      }\n\n      const contentType = response.headers['content-type'];\n      console.log('SSO content type: ' + contentType);\n      switch (response.statusCode) {\n        case 200:\n          if(contentType === \"text/html; charset=utf-8\"){\n            bodyToken = { token: `${endpoint} + - 200 HTML` };\n            console.log('SSO 200 Status Code returning HTML: ' + response.body);\n          }else if(contentType === \"application/json; charset=utf-8\"){\n            bodyToken = JSON.parse(body);\n            console.log('SSO accessToken: ' + bodyToken.token);\n          }else{\n            bodyToken = { token: `${endpoint} + - 200 Unknown` };\n            console.log('SSO 200 Status Code returning content not identified: ' + response.body);\n          }\n          break;\n        case 401:\n          bodyToken = { token: `${endpoint} + - 401` };\n          console.log('SSO Unauthorized.');\n          break;\n        case 500:\n          bodyToken = { token: `${endpoint} + - 500` };\n          console.log('SSO Error: ' + body);\n          break;\n        default:\n          bodyToken = { token: `${endpoint} + - None` };\n          console.log('SSO Unrecognized Status Code: ' + body);\n      }\n\n\n      return getDataFromDB(User, username, domain, email, profile, bodyToken, done);\n    });\n\n  }));\n}\n"],"sourceRoot":"/source/"}
>>>>>>> bc91ee08e9e6517c8560ea071542bc2cbedb4f7e
