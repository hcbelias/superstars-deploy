{"version":3,"sources":["auth/google/passport.js"],"names":["setup","getDataFromDB","User","username","domain","email","profile","token","done","findOne","exec","then","tokenObject","undefined","user","name","displayName","google","_json","provider","save","catch","err","config","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","emails","value","fields","split","message"],"mappings":";;;;;QA6BgBA,K,GAAAA,K;;AA7BhB;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+CC,KAA/C,EAAsDC,OAAtD,EAA+DC,KAA/D,EAAsEC,IAAtE,EAA2E;AACzEN,OAAKO,OAAL,CAAa,EAAC,YAAYN,QAAb,EAAb,EAAsCO,IAAtC,GACEC,IADF,CACO,gBAAQ;AACZ,QAAMC,cAAcL,QAAQ,EAAE,YAAaA,KAAf,EAAR,GAAgCM,SAApD;AACA,QAAIC,IAAJ,EAAU;AACTA,WAAKC,IAAL,GAAYT,QAAQU,WAApB;AACAF,WAAKG,MAAL,GAAcX,QAAQY,KAAtB;AACA,KAHD,MAGO;AACNJ,aAAO,IAAIZ,IAAJ,CAAS;AACfa,cAAMT,QAAQU,WADC;AAEfX,eAAOA,KAFQ;AAGfF,kBAAUA,QAHK;AAIfgB,kBAAU,QAJK;AAKfF,gBAAQX,QAAQY;AALD,OAAT,CAAP;AAOA;AACDJ,SAAKM,IAAL,GACGT,IADH,CACQ;AAAA,aAAQH,KAAK,IAAL,EAAWM,IAAX,EAAiBF,WAAjB,CAAR;AAAA,KADR,EAEGS,KAFH,CAES;AAAA,aAAOb,KAAKc,GAAL,CAAP;AAAA,KAFT;AAGD,GAlBF,EAmBED,KAnBF,CAmBQ;AAAA,WAAOb,KAAKc,GAAL,CAAP;AAAA,GAnBR;AAoBD;;AAEM,SAAStB,KAAT,CAAeE,IAAf,EAAqBqB,MAArB,EAA6B;AAClC,qBAASC,GAAT,CAAa,kCAAmB;AAC9BC,cAAUF,OAAON,MAAP,CAAcQ,QADM;AAE9BC,kBAAcH,OAAON,MAAP,CAAcS,YAFE;AAG9BC,iBAAaJ,OAAON,MAAP,CAAcU;AAHG,GAAnB,EAKb,UAASC,WAAT,EAAsBC,YAAtB,EAAoCvB,OAApC,EAA6CE,IAA7C,EAAmD;AACjD,QAAMH,QAAQC,QAAQwB,MAAR,CAAe,CAAf,EAAkBC,KAAhC;AACA,QAAMC,SAAS3B,MAAM4B,KAAN,CAAY,GAAZ,CAAf;AACA,QAAM9B,WAAW6B,OAAO,CAAP,CAAjB;AACA,QAAM5B,SAAS4B,OAAO,CAAP,CAAf;;AAEA,QAAGT,OAAOnB,MAAP,KAAkBA,MAArB,EAA4B;AACxB,aAAOI,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAE0B,SAAU,+BAAZ,EAAlB,CAAP;AACH;AACC;AACF,WAAOjC,cAAcC,IAAd,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,KAAtC,EAA6CC,OAA7C,EAAsD,EAAE,SAAS,EAAX,EAAtD,EAAsEE,IAAtE,CAAP;AACD,GAhBY,CAAb;AAiBD","file":"auth/google/passport.js","sourcesContent":["import passport from 'passport';\r\nimport {Strategy as GoogleStrategy} from 'passport-google-oauth20';\r\nimport error from '../../components/errors';\r\nimport config from '../../config/environment'\r\nimport request from 'request';\r\n\r\nfunction getDataFromDB(User, username, domain, email, profile, token, done){\r\n  User.findOne({'username': username }).exec()\r\n   .then(user => {\r\n     const tokenObject = token ? { 'ssoToken':  token} : undefined;\r\n     if (user) {\r\n    \t user.name = profile.displayName;\r\n    \t user.google = profile._json;\r\n     } else {\r\n    \t user = new User({\r\n    \t\t name: profile.displayName,\r\n    \t\t email: email,\r\n    \t\t username: username,\r\n    \t\t provider: 'google',\r\n    \t\t google: profile._json\r\n    \t });\r\n     }\r\n     user.save()\r\n       .then(user => done(null, user, tokenObject))\r\n       .catch(err => done(err));\r\n   })\r\n   .catch(err => done(err));\r\n}\r\n\r\nexport function setup(User, config) {\r\n  passport.use(new GoogleStrategy({\r\n    clientID: config.google.clientID,\r\n    clientSecret: config.google.clientSecret,\r\n    callbackURL: config.google.callbackURL\r\n  },\r\n  function(accessToken, refreshToken, profile, done) {\r\n    const email = profile.emails[0].value;\r\n    const fields = email.split('@');\r\n    const username = fields[0];\r\n    const domain = fields[1];\r\n\r\n    if(config.domain !== domain){\r\n        return done(null, false, { message : \"error-message-invalid-account\" });\r\n    }\r\n      //TODO: removing SSO for now\r\n    return getDataFromDB(User, username, domain, email, profile, { 'token': ''}, done);\r\n  }));\r\n}\r\n"],"sourceRoot":"/source/"}