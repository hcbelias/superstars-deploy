{"version":3,"sources":["auth/google/passport.js"],"names":["setup","getDataFromDB","User","username","domain","email","profile","token","done","findOne","exec","then","tokenObject","undefined","user","name","displayName","google","_json","provider","save","catch","err","config","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","emails","value","fields","split","console","log","endpoint","ssoUrl","error","response","body","bodyToken","message","contentType","headers","statusCode","statusMessage","JSON","parse"],"mappings":"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","file":"auth/google/passport.js","sourcesContent":["import passport from 'passport';\r\nimport {Strategy as GoogleStrategy} from 'passport-google-oauth20';\r\nimport error from '../../components/errors';\r\nimport config from '../../config/environment'\r\nimport request from 'request';\r\n\r\nfunction getDataFromDB(User, username, domain, email, profile, token, done){\r\n  User.findOne({'username': username }).exec()\r\n   .then(user => {\r\n     const tokenObject = token ? { 'ssoToken':  token} : undefined;\r\n     if (user) {\r\n    \t user.name = profile.displayName;\r\n    \t user.google = profile._json;\r\n     } else {\r\n    \t user = new User({\r\n    \t\t name: profile.displayName,\r\n    \t\t email: email,\r\n    \t\t username: username,\r\n    \t\t provider: 'google',\r\n    \t\t google: profile._json\r\n    \t });\r\n     }\r\n     user.save()\r\n       .then(user => done(null, user, tokenObject))\r\n       .catch(err => done(err));\r\n   })\r\n   .catch(err => done(err));\r\n}\r\n\r\nexport function setup(User, config) {\r\n  passport.use(new GoogleStrategy({\r\n    clientID: config.google.clientID,\r\n    clientSecret: config.google.clientSecret,\r\n    callbackURL: config.google.callbackURL\r\n  },\r\n  function(accessToken, refreshToken, profile, done) {\r\n    const email = profile.emails[0].value;\r\n    const fields = email.split('@');\r\n    const username = fields[0];\r\n    const domain = fields[1];\r\n    console.log('Google accessToken: ' + accessToken);\r\n    let endpoint = `${config.ssoUrl}?access_token=${accessToken}`;\r\n\r\n    request(endpoint, function(error, response, body){\r\n      console.log('SSO endpoint: ' + endpoint);\r\n      let bodyToken = { 'token': '' };\r\n      if(config.domain !== domain){\r\n        return done(null, false, { message : \"error-message-invalid-account\" });\r\n      }\r\n      \r\n      if(error){\r\n        console.log('SSO Error: ' + error);\r\n      }\r\n\r\n      if(response){\r\n          const contentType = response.headers['content-type'];\r\n          console.log('SSO content type: ' + contentType);\r\n          console.log('SSO response: ' + response.statusCode + ' - ' + response.statusMessage);\r\n          switch (response.statusCode) {\r\n              case 200:\r\n                  if(contentType === \"text/html; charset=utf-8\"){\r\n                      console.log('SSO 200 Status Code returning HTML: ' + response.body);\r\n                  }else if(contentType === \"application/json; charset=utf-8\"){\r\n                      bodyToken = JSON.parse(body);\r\n                      console.log('SSO accessToken: ' + bodyToken.token);\r\n                  }else{\r\n                      console.log('SSO 200 Status Code returning content not identified: ' + response.body);\r\n                  }\r\n                  break;\r\n              case 401:\r\n                  console.log('SSO Unauthorized.');\r\n                  break;\r\n              case 500:\r\n                  console.log('SSO Error: ' + body);\r\n                  break;\r\n              default:\r\n                  console.log('SSO Unrecognized Status Code: ' + body);\r\n          }\r\n      }\r\n\r\n      return getDataFromDB(User, username, domain, email, profile, bodyToken, done);\r\n    });\r\n\r\n  }));\r\n}\r\n"],"sourceRoot":"/source/"}