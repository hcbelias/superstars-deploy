{"version":3,"sources":["api/user/user.model.js"],"names":[],"mappings":"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","file":"api/user/user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport {Schema} from 'mongoose';\nimport config from '../../config/environment';\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nvar UserSchema = new Schema(\n  {\n    name: {\n      type: String,\n      trim: true\n    },\n    username: {\n      type: String,\n      unique: 'Username should be unique',\n      required: 'Please fill in a username',\n      trim: true\n    },\n    email: {\n      type: String,\n      lowercase: true,\n      required: true\n    },\n    city: {\n      type: String,\n      trim: true\n    },\n    currentPosition: {\n      type: String,\n      trim: true\n    },\n    currentLocation: {\n      type: String,\n      trim: true\n    },\n    role: {\n      type: String,\n      default: 'user'\n    },\n    isActive: {\n      type: Boolean,\n      default: true\n    },\n    external_id: {\n      type: String\n    },\n    social: {\n      type: {\n        skype: String,\n        facebook: String,\n        linkedIn: String,\n        twitter: String\n      },\n      default: {}\n    },\n    provider: String,\n    salt: String,\n\t  google: {},\n    currentClient: {\n      type: String\n    },\n    currentProject: {\n      type: String\n    },\n    hobbies: {\n      type: [String],\n      default: []\n    },\n    experiences: {\n      type: [{\n        position: {\n          type: String,\n          required: true\n        },\n        company: {\n          type: String,\n          required: true\n        },\n        project: String,\n        client: String,\n        startDate: {\n          type: Date,\n          required: true\n        },\n        skills: {\n          type: Array,\n          default: []\n        },\n        endDate: Date,\n        isCurrentPosition: Boolean,\n        activityDescription: String\n      }],\n      default: []\n    },\n    skillsCloud: {\n      type: [{\n        skill: {\n          type: String,\n          required: 'Skill Name is a required field.'\n        },\n        experienceYears: Number,\n        selfGrade: Number\n      }],\n      default: []\n    },\n    profileComplete: {\n      type: Boolean,\n      default: false\n    },\n    aboutMe: {\n      type: String\n    },\n    summaryOfQualification: {\n      type: String\n    },\n    education: {\n      type: [{\n        school: {\n          type: String,\n          required: 'School Name is a required field.'\n        },\n        degree: {\n          type: String,\n          required: 'Degree is a required field.'\n        },\n        field: {\n          type: String,\n          required: 'Field is a required field.'\n        },\n        activities: String,\n        startDate: {\n          type: Date,\n          required: 'Start Date is a required field.'\n        },\n        endDate: Date\n      }],\n      default: []\n    },\n    certifications: {\n      type: [{\n        name: {\n          type: String,\n          required: 'Certification Name is a required field.'\n        },\n        authority: {\n          type: String,\n          required: 'Certification Authority is a required field.'\n        },\n        startDate: Date,\n        endDate: Date\n      }]\n    },\n    languageSkills: {\n      type: [{\n        name: {\n          type: String,\n          required: 'Language is a required field.'\n        },\n        level: Number\n      }],\n      default: []\n    },\n  }, {\n  toJSON: {\n    virtuals: true\n  }\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n\t  'name': this.name,\n    'role': this.role,\n    'email': this.email,\n\t  'position': this.currentPosition,\n\t  'location': this.currentLocation,\n\t  'social': this.social,\n    'picture': this.getProfilePicture(),\n    'isProfileComplete': this.profileComplete,\n    'username': this.username\n\n    };\n  });\n\nUserSchema\n  .virtual('completeProfile')\n  .get(function() {\n    return {\n\t  'name': this.name,\n    'role': this.role,\n    'email': this.email,\n    'username': this.username,\n\t  'position': this.currentPosition,\n\t  'location': this.currentLocation,\n\t  'social': this.social,\n    'picture': this.getProfilePicture(),\n    'languageSkills': this.languageSkills,\n    'certifications': this.certifications,\n    'education': this.education,\n    'summaryOfQualification': this.summaryOfQualification,\n    'aboutMe': this.aboutMe,\n    'skillsCloud': this.skillsCloud,\n    'experiences': this.experiences,\n    'hobbies': this.hobbies\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      '_id': this._id,\n      'role': this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n  .path('email')\n  .validate(function(email) {\n    if (authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return email.length;\n  }, 'Email cannot be blank');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Methods\n */\nUserSchema.methods = {\n\n  /**\n   * Convert a Google picture url to a local one if `proxyPictureRequest` is set to TRUE.\n   *   Google Url: https://lh6.googleusercontent.com/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=50\n   *   Local Url: /images/profile/lh6/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=200\n   *\n   * @return {String}\n   * @api public\n   */\n  getProfilePicture: function() {\n    let googleData = this.google || {},\n        googleImage = googleData.image || {},\n        profilePicture = googleImage.url || '',\n        imagePathRegex = /^https?\\:\\/\\/([^\\.]+)\\.googleusercontent\\.com\\/([^\\?]+)(\\?(.*))?$/;\n\n    // Updating the 'sz' (size) parameter to 80 (default: sz=50)\n    profilePicture = profilePicture.replace(/sz\\=\\d+/, 'sz=80');\n\n    if(config.profile.proxyPictureRequest && imagePathRegex.test(profilePicture)) {\n      let imagePathMatch = profilePicture.match(imagePathRegex);\n\n      profilePicture = config.profile.proxyPictureUrl\n        .replace('{host}', imagePathMatch[1])\n        .replace('{imagePath}', imagePathMatch[2])\n        .replace('{querystring}', imagePathMatch[4] || '');\n    }\n\n    return profilePicture;\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"],"sourceRoot":"/source/"}