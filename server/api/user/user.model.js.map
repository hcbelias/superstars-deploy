{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","experienceSchema","isAvenueCode","type","Boolean","default","position","String","required","company","project","client","startDate","Date","skills","Array","endDate","isCurrentPosition","activityDescription","skillSchema","name","trim","experienceYears","Number","educationSchema","school","degree","field","activities","certificationSchema","authority","languageSchema","level","hobbySchema","positionSchema","UserSchema","username","unique","email","lowercase","currentLocation","role","isActive","external_id","skype","facebook","twitter","linkedIn","provider","salt","google","currentClient","currentProject","aboutMe","summaryOfQualification","positions","hobbies","experiences","skillsCloud","education","certifications","languageSkills","onBench","toJSON","virtuals","timestamps","virtual","get","social","getProfilePicture","profileComplete","updatedAt","createdAt","_id","length","path","validate","indexOf","validatePresenceOf","value","methods","googleData","googleImage","image","profilePicture","url","imagePathRegex","replace","profile","proxyPictureRequest","test","imagePathMatch","match","proxyPictureUrl","model"],"mappings":"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","file":"api/user/user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport { Schema } from 'mongoose';\nimport config from '../../config/environment';\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nlet experienceSchema = new Schema({\n  isAvenueCode:{\n    type: Boolean,\n    default: false\n  },\n  position: {\n    type: String,\n    required: true\n  },\n  company: {\n    type: String,\n    required: true\n  },\n  project: String,\n  client: String,\n  startDate: {\n    type: Date,\n    required: true\n  },\n  skills: {\n    type: Array,\n    default: []\n  },\n  endDate: Date,\n  isCurrentPosition: Boolean,\n  activityDescription: String\n});\n\nlet skillSchema = new Schema({\n  name: {\n    type: String,\n    required: 'Skill Name is a required field.',\n    trim: true\n  },\n  experienceYears: {\n    type: Number,\n    default: 0\n  }\n});\n\nlet educationSchema = new Schema({\n  school: {\n    type: String,\n    required: 'School Name is a required field.'\n  },\n  degree: {\n    type: String,\n    required: 'Degree is a required field.'\n  },\n  field: {\n    type: String,\n    required: 'Field is a required field.'\n  },\n  activities: String,\n  startDate: {\n    type: Date,\n    required: 'Start Date is a required field.'\n  },\n  endDate: Date\n});\n\nlet certificationSchema = new Schema({\n  name: {\n    type: String,\n    required: 'Certification Name is a required field.'\n  },\n  authority: {\n    type: String,\n    required: 'Certification Authority is a required field.'\n  },\n  startDate: Date,\n  endDate: Date\n});\n\nlet languageSchema = new Schema({\n  name: {\n    type: String,\n    required: 'Language is a required field.'\n  },\n  level: {\n    type: Number,\n    default: 1\n  }\n});\n\nlet hobbySchema = new Schema({\n  name: {\n    type: String,\n    required: 'Hobby name is a required field.'\n  }\n});\nlet positionSchema = new Schema({\n  name: {\n    type: String,\n    required: 'Positiona name is a required field.'\n  }\n});\nlet UserSchema = new Schema({\n  name: {\n    type: String,\n    trim: true\n  },\n  username: {\n    type: String,\n    unique: 'Username should be unique',\n    required: 'Please fill in a username',\n    trim: true\n  },\n  email: {\n    type: String,\n    lowercase: true,\n    required: true\n  },\n  currentLocation: {\n    type: String,\n    trim: true\n  },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  external_id: {\n    type: String\n  },\n  skype: {\n    type: String,\n    default: ''\n  },\n  facebook: {\n    type: String,\n    default: ''\n  },\n  twitter: {\n    type: String,\n    default: ''\n  },\n  linkedIn: {\n    type: String,\n    default: ''\n  },\n  provider: String,\n  salt: String,\n  google: {},\n  currentClient: {\n    type: String\n  },\n  currentProject: {\n    type: String\n  },\n  aboutMe: {\n    type: String,\n    default: ''\n  },\n  summaryOfQualification: {\n    type: String,\n    default: ''\n  },\n  positions: [positionSchema],\n  hobbies: [hobbySchema],\n  experiences: [experienceSchema],\n  skillsCloud: [skillSchema],\n  education: [educationSchema],\n  certifications: [certificationSchema],\n  languageSkills: [languageSchema],\n  onBench: {\n    type: Boolean,\n    default: false\n  }\n}, {\n  toJSON: {\n    virtuals: true\n  },\n  timestamps: true\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function () {\n    return {\n      'name': this.name,\n      'role': this.role,\n      'email': this.email,\n      'positions': this.positions,\n      'location': this.currentLocation,\n      'social': this.social,\n      'picture': this.getProfilePicture(),\n      'username': this.username,\n      'isProfileComplete': this.profileComplete\n    };\n  });\n\nUserSchema\n  .virtual('completeProfile')\n  .get(function () {\n    return {\n      'name': this.name,\n      'role': this.role,\n      'email': this.email,\n      'username': this.username,\n      'positions': this.positions,\n      'location': this.currentLocation,\n      'social': this.social,\n      'picture': this.getProfilePicture(),\n      'languageSkills': this.languageSkills,\n      'certifications': this.certifications,\n      'education': this.education,\n      'summaryOfQualification': this.summaryOfQualification,\n      'aboutMe': this.aboutMe,\n      'skillsCloud': this.skillsCloud,\n      'experiences': this.experiences,\n      'hobbies': this.hobbies,\n      'onBench': this.onBench,\n      'updatedAt': this.updatedAt,\n      'createdAt': this.createdAt\n    };\n  });\n\n//Once our model is changing, I'm creating this virtual prop to keep the contract unchanged\nUserSchema\n  .virtual('social')\n  .get(function () {\n    return {\n      'skype': this.skype,\n      'facebook': this.facebook,\n      'linkedIn': this.linkedIn,\n      'twitter': this.twitter\n    };\n  });\n\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function () {\n    return {\n      '_id': this._id,\n      'role': this.role\n    };\n  });\n\n  UserSchema\n    .virtual('profileComplete')\n    .get(function () {\n      return (null !== this.aboutMe && '' !== this.aboutMe.trim()) &&\n  \t  \t\t\t (null !== this.social.skype && '' !== this.social.skype.trim()) &&\n  \t  \t\t\t (null !== this.summaryOfQualification && '' !== this.summaryOfQualification.trim()) &&\n  \t  \t\t\t (null !== this.positions && this.positions.length > 0);\n    });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n  .path('email')\n  .validate(function (email) {\n    if (authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return email.length;\n  }, 'Email cannot be blank');\n\nvar validatePresenceOf = function (value) {\n  return value && value.length;\n};\n\n/**\n * Methods\n */\nUserSchema.methods = {\n\n  /**\n   * Convert a Google picture url to a local one if `proxyPictureRequest` is set to TRUE.\n   *   Google Url: https://lh6.googleusercontent.com/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=50\n   *   Local Url: /images/profile/lh6/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=200\n   *\n   * @return {String}\n   * @api public\n   */\n  getProfilePicture: function () {\n    let googleData = this.google || {},\n      googleImage = googleData.image || {},\n      profilePicture = googleImage.url || '',\n      imagePathRegex = /^https?\\:\\/\\/([^\\.]+)\\.googleusercontent\\.com\\/([^\\?]+)(\\?(.*))?$/;\n\n    // Updating the 'sz' (size) parameter to 80 (default: sz=50)\n    profilePicture = profilePicture.replace(/sz\\=\\d+/, 'sz=160');\n\n    if (config.profile.proxyPictureRequest && imagePathRegex.test(profilePicture)) {\n      let imagePathMatch = profilePicture.match(imagePathRegex);\n\n      profilePicture = config.profile.proxyPictureUrl\n        .replace('{host}', imagePathMatch[1])\n        .replace('{imagePath}', imagePathMatch[2])\n        .replace('{querystring}', imagePathMatch[4] || '');\n    }\n\n    return profilePicture;\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"],"sourceRoot":"/source/"}