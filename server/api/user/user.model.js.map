{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","experienceSchema","isAvenueCode","type","Boolean","default","position","String","required","company","project","client","startDate","Date","skills","Array","endDate","isCurrentPosition","activityDescription","skillSchema","name","trim","experienceYears","Number","educationSchema","school","degree","field","activities","certificationSchema","authority","languageSchema","level","hobbySchema","positionSchema","UserSchema","username","unique","email","lowercase","currentLocation","role","isActive","external_id","skype","facebook","twitter","linkedIn","provider","salt","google","currentClient","currentProject","aboutMe","summaryOfQualification","positions","hobbies","experiences","skillsCloud","education","certifications","languageSkills","toJSON","virtuals","timestamps","virtual","get","social","getProfilePicture","profileComplete","updatedAt","createdAt","_id","length","path","validate","indexOf","validatePresenceOf","value","methods","googleData","googleImage","image","profilePicture","url","imagePathRegex","replace","profile","proxyPictureRequest","test","imagePathMatch","match","proxyPictureUrl","model"],"mappings":"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","file":"api/user/user.model.js","sourcesContent":["'use strict';\r\n\r\nimport crypto from 'crypto';\r\nimport mongoose from 'mongoose';\r\nmongoose.Promise = require('bluebird');\r\nimport { Schema } from 'mongoose';\r\nimport config from '../../config/environment';\r\n\r\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\r\n\r\nlet experienceSchema = new Schema({\r\n  isAvenueCode:{\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  position: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  company: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  project: String,\r\n  client: String,\r\n  startDate: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  skills: {\r\n    type: Array,\r\n    default: []\r\n  },\r\n  endDate: Date,\r\n  isCurrentPosition: Boolean,\r\n  activityDescription: String\r\n});\r\n\r\nlet skillSchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Skill Name is a required field.',\r\n    trim: true\r\n  },\r\n  experienceYears: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n});\r\n\r\nlet educationSchema = new Schema({\r\n  school: {\r\n    type: String,\r\n    required: 'School Name is a required field.'\r\n  },\r\n  degree: {\r\n    type: String,\r\n    required: 'Degree is a required field.'\r\n  },\r\n  field: {\r\n    type: String,\r\n    required: 'Field is a required field.'\r\n  },\r\n  activities: String,\r\n  startDate: {\r\n    type: Date,\r\n    required: 'Start Date is a required field.'\r\n  },\r\n  endDate: Date\r\n});\r\n\r\nlet certificationSchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Certification Name is a required field.'\r\n  },\r\n  authority: {\r\n    type: String,\r\n    required: 'Certification Authority is a required field.'\r\n  },\r\n  startDate: Date,\r\n  endDate: Date\r\n});\r\n\r\nlet languageSchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Language is a required field.'\r\n  },\r\n  level: {\r\n    type: Number,\r\n    default: 1\r\n  }\r\n});\r\n\r\nlet hobbySchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Hobby name is a required field.'\r\n  }\r\n});\r\nlet positionSchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Positiona name is a required field.'\r\n  }\r\n});\r\nlet UserSchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    trim: true\r\n  },\r\n  username: {\r\n    type: String,\r\n    unique: 'Username should be unique',\r\n    required: 'Please fill in a username',\r\n    trim: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    lowercase: true,\r\n    required: true\r\n  },\r\n  currentLocation: {\r\n    type: String,\r\n    trim: true\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'user'\r\n  },\r\n  isActive: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  external_id: {\r\n    type: String\r\n  },\r\n  skype: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  facebook: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  twitter: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  linkedIn: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  provider: String,\r\n  salt: String,\r\n  google: {},\r\n  currentClient: {\r\n    type: String\r\n  },\r\n  currentProject: {\r\n    type: String\r\n  },\r\n  aboutMe: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  summaryOfQualification: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  positions: [positionSchema],\r\n  hobbies: [hobbySchema],\r\n  experiences: [experienceSchema],\r\n  skillsCloud: [skillSchema],\r\n  education: [educationSchema],\r\n  certifications: [certificationSchema],\r\n  languageSkills: [languageSchema]\r\n}, {\r\n  toJSON: {\r\n    virtuals: true\r\n  },\r\n  timestamps: true\r\n});\r\n\r\n/**\r\n * Virtuals\r\n */\r\n\r\n// Public profile information\r\nUserSchema\r\n  .virtual('profile')\r\n  .get(function () {\r\n    return {\r\n      'name': this.name,\r\n      'role': this.role,\r\n      'email': this.email,\r\n      'positions': this.positions,\r\n      'location': this.currentLocation,\r\n      'social': this.social,\r\n      'picture': this.getProfilePicture(),\r\n      'username': this.username,\r\n      'isProfileComplete': this.profileComplete\r\n    };\r\n  });\r\n\r\nUserSchema\r\n  .virtual('completeProfile')\r\n  .get(function () {\r\n    return {\r\n      'name': this.name,\r\n      'role': this.role,\r\n      'email': this.email,\r\n      'username': this.username,\r\n      'positions': this.positions,\r\n      'location': this.currentLocation,\r\n      'social': this.social,\r\n      'picture': this.getProfilePicture(),\r\n      'languageSkills': this.languageSkills,\r\n      'certifications': this.certifications,\r\n      'education': this.education,\r\n      'summaryOfQualification': this.summaryOfQualification,\r\n      'aboutMe': this.aboutMe,\r\n      'skillsCloud': this.skillsCloud,\r\n      'experiences': this.experiences,\r\n      'hobbies': this.hobbies,\r\n      'updatedAt': this.updatedAt,\r\n      'createdAt': this.createdAt\r\n    };\r\n  });\r\n\r\n//Once our model is changing, I'm creating this virtual prop to keep the contract unchanged\r\nUserSchema\r\n  .virtual('social')\r\n  .get(function () {\r\n    return {\r\n      'skype': this.skype,\r\n      'facebook': this.facebook,\r\n      'linkedIn': this.linkedIn,\r\n      'twitter': this.twitter\r\n    };\r\n  });\r\n\r\n\r\n// Non-sensitive info we'll be putting in the token\r\nUserSchema\r\n  .virtual('token')\r\n  .get(function () {\r\n    return {\r\n      '_id': this._id,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n  UserSchema\r\n    .virtual('profileComplete')\r\n    .get(function () {\r\n      return (null !== this.aboutMe && '' !== this.aboutMe.trim()) &&\r\n  \t  \t\t\t (null !== this.social.skype && '' !== this.social.skype.trim()) &&\r\n  \t  \t\t\t (null !== this.summaryOfQualification && '' !== this.summaryOfQualification.trim()) &&\r\n  \t  \t\t\t (null !== this.positions && this.positions.length > 0);\r\n    });\r\n\r\n/**\r\n * Validations\r\n */\r\n\r\n// Validate empty email\r\nUserSchema\r\n  .path('email')\r\n  .validate(function (email) {\r\n    if (authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return email.length;\r\n  }, 'Email cannot be blank');\r\n\r\nvar validatePresenceOf = function (value) {\r\n  return value && value.length;\r\n};\r\n\r\n/**\r\n * Methods\r\n */\r\nUserSchema.methods = {\r\n\r\n  /**\r\n   * Convert a Google picture url to a local one if `proxyPictureRequest` is set to TRUE.\r\n   *   Google Url: https://lh6.googleusercontent.com/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=50\r\n   *   Local Url: /images/profile/lh6/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=200\r\n   *\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  getProfilePicture: function () {\r\n    let googleData = this.google || {},\r\n      googleImage = googleData.image || {},\r\n      profilePicture = googleImage.url || '',\r\n      imagePathRegex = /^https?\\:\\/\\/([^\\.]+)\\.googleusercontent\\.com\\/([^\\?]+)(\\?(.*))?$/;\r\n\r\n    // Updating the 'sz' (size) parameter to 80 (default: sz=50)\r\n    profilePicture = profilePicture.replace(/sz\\=\\d+/, 'sz=160');\r\n\r\n    if (config.profile.proxyPictureRequest && imagePathRegex.test(profilePicture)) {\r\n      let imagePathMatch = profilePicture.match(imagePathRegex);\r\n\r\n      profilePicture = config.profile.proxyPictureUrl\r\n        .replace('{host}', imagePathMatch[1])\r\n        .replace('{imagePath}', imagePathMatch[2])\r\n        .replace('{querystring}', imagePathMatch[4] || '');\r\n    }\r\n\r\n    return profilePicture;\r\n  }\r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"],"sourceRoot":"/source/"}