{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","experienceSchema","position","type","String","required","company","project","client","startDate","Date","skills","Array","default","endDate","isCurrentPosition","Boolean","activityDescription","skillSchema","name","trim","experienceYears","Number","educationSchema","school","degree","field","activities","certificationSchema","authority","languageSchema","level","hobbySchema","UserSchema","username","unique","email","lowercase","city","currentPosition","currentLocation","role","isActive","external_id","skype","facebook","twitter","linkedIn","provider","salt","google","currentClient","currentProject","profileComplete","aboutMe","summaryOfQualification","hobbies","experiences","skillsCloud","education","certifications","languageSkills","toJSON","virtuals","virtual","get","social","getProfilePicture","_id","path","validate","indexOf","length","validatePresenceOf","value","methods","googleData","googleImage","image","profilePicture","url","imagePathRegex","replace","profile","proxyPictureRequest","test","imagePathMatch","match","proxyPictureUrl","model"],"mappings":"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","file":"api/user/user.model.js","sourcesContent":["'use strict';\r\n\r\nimport crypto from 'crypto';\r\nimport mongoose from 'mongoose';\r\nmongoose.Promise = require('bluebird');\r\nimport {Schema} from 'mongoose';\r\nimport config from '../../config/environment';\r\n\r\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\r\n\r\nlet experienceSchema = new Schema({\r\n  position: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  company: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  project: String,\r\n  client: String,\r\n  startDate: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  skills: {\r\n    type: Array,\r\n    default: []\r\n  },\r\n  endDate: Date,\r\n  isCurrentPosition: Boolean,\r\n  activityDescription: String\r\n});\r\n\r\nlet skillSchema = new Schema({\r\n  name: { type: String, required: 'Skill Name is a required field.', trim: true },\r\n  experienceYears : { type: Number, default: 0 }\r\n});\r\n\r\nlet educationSchema =  new Schema({\r\n  school: {\r\n    type: String,\r\n    required: 'School Name is a required field.'\r\n  },\r\n  degree: {\r\n    type: String,\r\n    required: 'Degree is a required field.'\r\n  },\r\n  field: {\r\n    type: String,\r\n    required: 'Field is a required field.'\r\n  },\r\n  activities: String,\r\n  startDate: {\r\n    type: Date,\r\n    required: 'Start Date is a required field.'\r\n  },\r\n  endDate: Date\r\n});\r\n\r\nlet certificationSchema =  new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Certification Name is a required field.'\r\n  },\r\n  authority: {\r\n    type: String,\r\n    required: 'Certification Authority is a required field.'\r\n  },\r\n  startDate: Date,\r\n  endDate: Date\r\n});\r\n\r\nlet languageSchema =  new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Language is a required field.'\r\n  },\r\n  level: { type: Number, default: 1 }\r\n});\r\n\r\nlet hobbySchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: 'Hobby name is a required field.'\r\n  }\r\n});\r\n\r\nlet UserSchema = new Schema({\r\n    name: {\r\n      type: String,\r\n      trim: true\r\n    },\r\n    username: {\r\n      type: String,\r\n      unique: 'Username should be unique',\r\n      required: 'Please fill in a username',\r\n      trim: true\r\n    },\r\n    email: {\r\n      type: String,\r\n      lowercase: true,\r\n      required: true\r\n    },\r\n    city: {\r\n      type: String,\r\n      trim: true\r\n    },\r\n    currentPosition: {\r\n      type: String,\r\n      trim: true\r\n    },\r\n    currentLocation: {\r\n      type: String,\r\n      trim: true\r\n    },\r\n    role: {\r\n      type: String,\r\n      default: 'user'\r\n    },\r\n    isActive: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    external_id: {\r\n      type: String\r\n    },\r\n    skype: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    facebook: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    twitter: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    linkedIn: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    provider: String,\r\n    salt: String,\r\n\t  google: {},\r\n    currentClient: {\r\n      type: String\r\n    },\r\n    currentProject: {\r\n      type: String\r\n    },\r\n    profileComplete: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    aboutMe: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    summaryOfQualification: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    hobbies: [hobbySchema],\r\n    experiences: [experienceSchema],\r\n    skillsCloud: [skillSchema],    \r\n    education: [educationSchema],\r\n    certifications: [certificationSchema],\r\n    languageSkills: [languageSchema]\r\n  }, {\r\n  toJSON: {\r\n    virtuals: true\r\n  }\r\n});\r\n\r\n/**\r\n * Virtuals\r\n */\r\n\r\n// Public profile information\r\nUserSchema\r\n  .virtual('profile')\r\n  .get(function() {\r\n    return {\r\n\t  'name': this.name,\r\n    'role': this.role,\r\n    'email': this.email,\r\n\t  'position': this.currentPosition,\r\n\t  'location': this.currentLocation,\r\n\t  'social': this.social,\r\n    'picture': this.getProfilePicture(),\r\n    'isProfileComplete': this.profileComplete,\r\n    'username': this.username\r\n\r\n    };\r\n  });\r\n\r\nUserSchema\r\n  .virtual('completeProfile')\r\n  .get(function() {\r\n    return {\r\n\t  'name': this.name,\r\n    'role': this.role,\r\n    'email': this.email,\r\n    'username': this.username,\r\n\t  'position': this.currentPosition,\r\n\t  'location': this.currentLocation,\r\n\t  'social': this.social,\r\n    'picture': this.getProfilePicture(),\r\n    'languageSkills': this.languageSkills,\r\n    'certifications': this.certifications,\r\n    'education': this.education,\r\n    'summaryOfQualification': this.summaryOfQualification,\r\n    'aboutMe': this.aboutMe,\r\n    'skillsCloud': this.skillsCloud,\r\n    'experiences': this.experiences,\r\n    'hobbies': this.hobbies\r\n    };\r\n  });\r\n\r\n//Once our model is changing, I'm creating this virtual prop to keep the contract unchanged\r\nUserSchema\r\n  .virtual('social')\r\n  .get(function() {\r\n    return {\r\n\t  'skype': this.skype,\r\n    'facebook': this.facebook,\r\n    'linkedIn': this.linkedIn,\r\n    'twitter': this.twitter\r\n    };\r\n  });\r\n\r\n\r\n// Non-sensitive info we'll be putting in the token\r\nUserSchema\r\n  .virtual('token')\r\n  .get(function() {\r\n    return {\r\n      '_id': this._id,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n/**\r\n * Validations\r\n */\r\n\r\n// Validate empty email\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(email) {\r\n    if (authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return email.length;\r\n  }, 'Email cannot be blank');\r\n\r\nvar validatePresenceOf = function(value) {\r\n  return value && value.length;\r\n};\r\n\r\n/**\r\n * Methods\r\n */\r\nUserSchema.methods = {\r\n\r\n  /**\r\n   * Convert a Google picture url to a local one if `proxyPictureRequest` is set to TRUE.\r\n   *   Google Url: https://lh6.googleusercontent.com/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=50\r\n   *   Local Url: /images/profile/lh6/-cDUEyHTb5Pk/AAAAAAAAAAI/AAAAAAAAAEA/6vTpsC0MmC4/photo.jpg?sz=200\r\n   *\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  getProfilePicture: function() {\r\n    let googleData = this.google || {},\r\n        googleImage = googleData.image || {},\r\n        profilePicture = googleImage.url || '',\r\n        imagePathRegex = /^https?\\:\\/\\/([^\\.]+)\\.googleusercontent\\.com\\/([^\\?]+)(\\?(.*))?$/;\r\n\r\n    // Updating the 'sz' (size) parameter to 80 (default: sz=50)\r\n    profilePicture = profilePicture.replace(/sz\\=\\d+/, 'sz=160');\r\n\r\n    if(config.profile.proxyPictureRequest && imagePathRegex.test(profilePicture)) {\r\n      let imagePathMatch = profilePicture.match(imagePathRegex);\r\n\r\n      profilePicture = config.profile.proxyPictureUrl\r\n        .replace('{host}', imagePathMatch[1])\r\n        .replace('{imagePath}', imagePathMatch[2])\r\n        .replace('{querystring}', imagePathMatch[4] || '');\r\n    }\r\n\r\n    return profilePicture;\r\n  }\r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"],"sourceRoot":"/source/"}