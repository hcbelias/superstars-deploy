{"version":3,"sources":["api/user/user.profile.lockmanager.js"],"names":["ProfileLockManager","options","profiles","sessions","maxAllowedLocks","maxLockName","profileId","profile","lockCount","locks","client","id","clientId","session","releaseClientLocks","roomName","getRoomName","error","clientErrorEmitter","leave","join","createSession","sendLockList","attachDisconnectListener","destroySession","lockName","getProfile","length","name","time","Date","getTime","notifyAcquiredLock","lockNames","forEach","releaseLock","lock","warning","clientWarningEmitter","notifyReleasedLock","emit","room","broadcast","to","once","message"],"mappings":"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","file":"api/user/user.profile.lockmanager.js","sourcesContent":["class ProfileLockManager {\n  constructor(options) {\n    options = options || {};\n\n    this.profiles = {};\n    this.sessions = {};\n    this.maxAllowedLocks = options.maxAllowedLocks || 10;\n    this.maxLockName = options.maxLockName || 50;\n  }\n\n  getRoomName(profileId) {\n    return 'profile:edit:room:' + profileId;\n  }\n\n  getProfile(profileId) {\n    var profile = this.profiles[profileId];\n\n    if(!profile) {\n      profile = {\n        lockCount: 0,\n        locks: {}\n      };\n\n      if(profileId > 0) {\n        this.profiles[profileId] = profile;\n      }\n    }\n\n    return profile;\n  }\n\n  createSession(client, profileId) {\n    this.sessions[client.id] = {\n      clientId: client.id,\n      profileId: profileId,\n      lockCount: 0,\n      locks: {}\n    };\n\n    return this.sessions[client.id];\n  }\n\n  destroySession(client) {\n    var session = this.sessions[client.id];\n\n    if(!session) {\n      return;\n    }\n\n    this.releaseClientLocks(client);\n    delete this.sessions[client.id];\n  }\n\n  join(client, profileId) {\n    var roomName = this.getRoomName(profileId),\n        error = this.clientErrorEmitter(client);\n\n    if(profileId <= 0) {\n      return error('Invalid profile id (' + profileId + ')');\n    }\n\n    this.leave(client);\n\n    client.join(roomName, () => {\n      this.createSession(client, profileId);\n      this.sendLockList(client, profileId);\n    });\n\n    this.attachDisconnectListener(client);\n  }\n\n  leave(client) {\n    var session = this.sessions[client.id],\n        profileId = session ? session.profileId : 0,\n        roomName = this.getRoomName(profileId);\n\n    if(session) {\n      client.leave(roomName);\n    }\n\n    this.destroySession(client);\n  }\n\n  acquireLock(client, lockName) {\n    var session = this.sessions[client.id],\n        profileId = session ? session.profileId : 0,\n        profile = this.getProfile(profileId),\n        error = this.clientErrorEmitter(client);\n\n    if(!session) {\n      return error('The session has not been started');\n    }\n\n    if(!lockName) {\n      return error('Lock name is undefined');\n    } else if(lockName.length > this.maxLockName) {\n      return error('Lock name must not exceed ' + this.maxLockName + ' characters');\n    }\n\n    if(profile.locks[lockName]) {\n      if(profile.locks[lockName].clientId !== client.id) {\n        return error(lockName + ' has already been acquired by other client');\n      }\n\n      return true;\n    } else {\n      if(session.lockCount >= this.maxAllowedLocks) {\n        return error('The client reached the maximum number of allowed locks (' + session.lockCount + ')');\n      }\n\n      profile.lockCount++;\n      profile.locks[lockName] = {\n        name: lockName,\n        clientId: client.id\n      };\n\n      session.lockCount++;\n      session.locks[lockName] = {\n        name: lockName,\n        time: (new Date()).getTime()\n      }\n    }\n\n    this.notifyAcquiredLock(client, profileId, lockName);\n    return true;\n  }\n\n  releaseClientLocks(client) {\n    let session = this.sessions[client.id],\n        lockNames = session ? Object.keys(session.locks) : [];\n\n    if(!session) {\n      return;\n    }\n\n    lockNames.forEach((lockName) => {\n      this.releaseLock(client, lockName);\n    });\n  }\n\n  releaseLock(client, lockName) {\n    var session = this.sessions[client.id],\n        profileId = session ? session.profileId : 0,\n        profile = this.getProfile(profileId),\n        lock = profile.locks[lockName],\n        error = this.clientErrorEmitter(client),\n        warning = this.clientWarningEmitter(client);\n\n    if(!session) {\n      return error('The session has not been started for this client');\n    }\n\n    if(!lock) {\n      return warning(lockName + ' does not exists');\n    }\n\n    if(lock.clientId !== client.id) {\n      return error(lockName + ' has been acquired by other client ');\n    }\n\n    delete session.locks[lockName];\n    session.lockCount--;\n\n    delete profile.locks[lockName];\n    profile.lockCount--;\n\n    if(!profile.lockCount) {\n      delete this.profiles[profileId];\n    }\n\n    this.notifyReleasedLock(client, profileId, lockName);\n    return true;\n  }\n\n  sendLockList(client) {\n   var session = this.sessions[client.id] || {},\n       profile = this.profiles[session.profileId || 0] || {},\n       locks = profile.locks || {};\n\n    client.emit('profile:lock:list', locks);\n  }\n\n  notifyAcquiredLock(client, profileId, lockName) {\n    var room = this.getRoomName(profileId);\n\n    client.broadcast.to(room).emit('profile:lock:acquired', {\n      name: lockName\n    });\n  }\n\n  notifyReleasedLock(client, profileId, lockName) {\n    var room = this.getRoomName(profileId);\n\n    client.broadcast.to(room).emit('profile:lock:released', {\n      name: lockName\n    });\n  }\n\n  attachDisconnectListener(client) {\n    client.once('disconnect', () => {\n      this.leave(client);\n    });\n  }\n\n  clientErrorEmitter(client) {\n    return (message) => {\n      client.emit('profile:lock:error', message);\n      return false;\n    }\n  }\n\n  clientWarningEmitter(client) {\n    return (message) => {\n      client.emit('profile:lock:warning', message);\n      return false;\n    }\n  }\n}\n\nexport default ProfileLockManager;\n"],"sourceRoot":"/source/"}