{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","urlencoded","extended","json","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","process","SAUCE_USERNAME","xframe","hsts","maxAge","includeSubDomains","preload","require","ignore"],"mappings":"AAAA;;;;AAIA;;;;;;kBAqBe,UAASA,GAAT,EAAc;AAC3B,MAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,MAAID,QAAQ,aAAR,IAAyBA,QAAQ,MAArC,EAA6C;AAC3CD,QAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACD;;AAED,MAAIL,QAAQ,YAAZ,EAA0B;AACxBD,QAAIG,GAAJ,CAAQ,4BAAQ,eAAKE,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACD;;AAEDN,MAAIO,GAAJ,CAAQ,SAAR,EAAmB,eAAKF,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAN,MAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAeJ,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,MAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,MAAIO,GAAJ,CAAQ,OAAR,EAAiB,sBAAOD,IAAP,GAAc,eAA/B;AACAN,MAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAP,MAAIG,GAAJ,CAAQ,4BAAR;AACAH,MAAIG,GAAJ,CAAQ,qBAAWK,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,MAAIG,GAAJ,CAAQ,qBAAWO,IAAX,EAAR;AACAV,MAAIG,GAAJ,CAAQ,+BAAR;AACAH,MAAIG,GAAJ,CAAQ,6BAAR;AACAH,MAAIG,GAAJ,CAAQ,6BAAR;AACAH,MAAIG,GAAJ,CAAQ,mBAASQ,UAAT,EAAR;;AAEA;AACA;AACA;AACAX,MAAIG,GAAJ,CAAQ,8BAAQ;AACdS,YAAQ,sBAAOC,OAAP,CAAeC,OADT;AAEdC,uBAAmB,IAFL;AAGdC,YAAQ,KAHM;AAIdC,WAAO,IAAIC,UAAJ,CAAe;AACpBC,0BAAoB,mBAASC,UADT;AAEpBC,UAAI;AAFgB,KAAf;AAJO,GAAR,CAAR;;AAUA;;;;AAIA,MAAIpB,QAAQ,MAAR,IAAkB,CAACqB,QAAQrB,GAAR,CAAYsB,cAAnC,EAAmD;AACjDvB,QAAIG,GAAJ,CAAQ,qBAAM;AACd;AACE;AACA;;AAEAqB,cAAQ,YALI;AAMZC,YAAM;AACJC,gBAAQ,QADJ,EACc;AAClBC,2BAAmB,IAFf;AAGJC,iBAAS;AAHL;AANM,KAAN,CAAR;AAaD;;AAED,MAAI,kBAAkB3B,GAAtB,EAA2B;AACzBD,QAAIG,GAAJ,CAAQ0B,QAAQ,oBAAR,EAA8B;AACpCC,cAAQ,CACN,cADM,EAEN,cAFM,EAEU,eAFV,EAE2B,eAF3B,EAE4C,eAF5C,EAE6D,gBAF7D,EAGN,eAHM,EAGW,eAHX,EAG4B,gBAH5B,EAG8C,eAH9C,EAG+D,eAH/D;AAD4B,KAA9B,CAAR;AAOD;;AAED,MAAI,kBAAkB7B,GAAlB,IAAyB,WAAWA,GAAxC,EAA6C;AAC3CD,QAAIG,GAAJ,CAAQ,6BAAR,EAD2C,CAClB;AAC1B;AACF,C;;AA1FD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIe,aAAa,qDAAjB","file":"config/express.js","sourcesContent":["/**\r\n * Express configuration\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport favicon from 'serve-favicon';\r\nimport morgan from 'morgan';\r\nimport compression from 'compression';\r\nimport bodyParser from 'body-parser';\r\nimport methodOverride from 'method-override';\r\nimport cookieParser from 'cookie-parser';\r\nimport errorHandler from 'errorhandler';\r\nimport path from 'path';\r\nimport lusca from 'lusca';\r\nimport config from './environment';\r\nimport passport from 'passport';\r\nimport session from 'express-session';\r\nimport connectMongo from 'connect-mongo';\r\nimport mongoose from 'mongoose';\r\nimport flash from 'connect-flash';\r\n\r\nvar MongoStore = connectMongo(session);\r\n\r\nexport default function(app) {\r\n  var env = app.get('env');\r\n\r\n  if (env === 'development' || env === 'test') {\r\n    app.use(express.static(path.join(config.root, '.tmp')));\r\n  }\r\n\r\n  if (env === 'production') {\r\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\r\n  }\r\n\r\n  app.set('appPath', path.join(config.root, 'client'));\r\n  app.use(express.static(app.get('appPath')));\r\n  app.use(morgan('dev'));\r\n\r\n  app.set('views', config.root + '/server/views');\r\n  app.set('view engine', 'jade');\r\n  app.use(compression());\r\n  app.use(bodyParser.urlencoded({ extended: false }));\r\n  app.use(bodyParser.json());\r\n  app.use(methodOverride());\r\n  app.use(cookieParser());\r\n  app.use(flash());\r\n  app.use(passport.initialize());\r\n\r\n  // Persist sessions with MongoStore / sequelizeStore\r\n  // We need to enable sessions for passport-twitter because it's an\r\n  // oauth 1.0 strategy, and Lusca depends on sessions\r\n  app.use(session({\r\n    secret: config.secrets.session,\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    store: new MongoStore({\r\n      mongooseConnection: mongoose.connection,\r\n      db: 'superstars'\r\n    })\r\n  }));\r\n\r\n  /**\r\n   * Lusca - express server security\r\n   * https://github.com/krakenjs/lusca\r\n   */\r\n  if (env !== 'test' && !process.env.SAUCE_USERNAME) {\r\n    app.use(lusca({\r\n    //  csrf: {\r\n      //  angular: true\r\n      //},\r\n      \r\n      xframe: 'SAMEORIGIN',\r\n      hsts: {\r\n        maxAge: 31536000, //1 year, in seconds\r\n        includeSubDomains: true,\r\n        preload: true\r\n      },\r\n  //    xssProtection: true\r\n    }));\r\n  }\r\n\r\n  if ('development' === env) {\r\n    app.use(require('connect-livereload')({\r\n      ignore: [\r\n        /^\\/api\\/(.*)/,\r\n        /\\.js(\\?.*)?$/, /\\.css(\\?.*)?$/, /\\.svg(\\?.*)?$/, /\\.ico(\\?.*)?$/, /\\.woff(\\?.*)?$/,\r\n        /\\.png(\\?.*)?$/, /\\.jpg(\\?.*)?$/, /\\.jpeg(\\?.*)?$/, /\\.gif(\\?.*)?$/, /\\.pdf(\\?.*)?$/\r\n      ]\r\n    }));\r\n  }\r\n\r\n  if ('development' === env || 'test' === env) {\r\n    app.use(errorHandler()); // Error handler - has to be last\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}